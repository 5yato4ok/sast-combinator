- name: Ensure required packages are present for migration
  ansible.builtin.package:
    name: [ rsync, e2fsprogs, util-linux ]
    state: present

- name: Validate required vars
  ansible.builtin.assert:
    that:
      - mysql_mount_device | length > 0
      - mysql_device_mountpoint | length > 0
    fail_msg: "Set mysql_mount_device (e.g. /dev/sdb) and mysql_device_mountpoint (e.g. /mnt/storage)."

- name: Stop stack before storage changes
  community.docker.docker_compose_v2:
    project_src: "{{ mysql_stack_root }}"
    state: absent
  ignore_errors: true

- name: Ensure base mountpoint exists
  ansible.builtin.file:
    path: "{{ mysql_device_mountpoint }}"
    state: directory
    mode: "0755"

- name: Check if device already has filesystem
  ansible.builtin.command: blkid -o value -s TYPE {{ mysql_mount_device }}
  register: fs_type
  changed_when: false
  failed_when: false

- name: Create filesystem if needed
  ansible.builtin.filesystem:
    fstype: "{{ mysql_mount_fstype }}"
    dev: "{{ mysql_mount_device }}"
    force: false
  when: mysql_mount_create_fs | bool and (fs_type.rc != 0 or fs_type.stdout | length == 0)

- name: Get UUID of device
  ansible.builtin.command: blkid -s UUID -o value {{ mysql_mount_device }}
  register: dev_uuid
  changed_when: false

- name: Persist device mount in fstab and mount it
  ansible.posix.mount:
    path: "{{ mysql_device_mountpoint }}"
    src: "UUID={{ dev_uuid.stdout }}"
    fstype: "{{ mysql_mount_fstype }}"
    opts: "{{ mysql_mount_opts }}"
    state: mounted

- name: Compute target MySQL data dir on device
  ansible.builtin.set_fact:
    mysql_data_dir: "{{ mysql_device_mountpoint.rstrip('/') + '/' + mysql_subdir_name }}"

- name: Ensure MySQL target directory exists on the device
  ansible.builtin.file:
    path: "{{ mysql_data_dir }}"
    state: directory
    mode: "0755"

- name: Rsync current data into device subdir (if any)
  ansible.builtin.shell: >
    rsync -aHAX --info=progress2 {{ mysql_stack_root }}/ {{ mysql_data_dir }}/
  when: mysql_migrate_existing | bool
  args:
    warn: false

- name: Ensure mysql_stack_root exists
  ansible.builtin.file:
    path: "{{ mysql_stack_root }}"
    state: directory
    mode: "0755"

- name: Bind-mount device subdir onto mysql_stack_root
  ansible.posix.mount:
    path: "{{ mysql_stack_root }}"
    src: "{{ mysql_data_dir }}"
    fstype: none
    opts: bind
    state: mounted
  when: mysql_bind_mount | bool

- name: Bring stack back up
  community.docker.docker_compose_v2:
    project_src: "{{ mysql_stack_root }}"
    state: present
    build: always
